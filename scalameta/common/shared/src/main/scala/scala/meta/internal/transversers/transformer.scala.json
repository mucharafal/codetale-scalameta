[
  {
    "id" : "5a58a1d5-6a13-4baf-af26-6ff143febb66",
    "prId" : 2134,
    "comments" : [
      {
        "id" : "0711809c-df50-47ae-8f00-fe80be1d676f",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "This produces for each field a n pattern matching block that will modify the tree if anything in it is modified. The whole function is just extracted, so not really changed.",
        "createdAt" : "2020-10-09T12:27:27Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 22,
    "diffHunk" : "@@ -1,1 +15,19 @@  import c.universe._\n\n  def transformField(f: Field): ValDef = {\n    def treeTransformer(input: Tree, tpe: Type): Tree = {\n      val from = c.freshName(TermName(\"from\"))"
  },
  {
    "id" : "868edab3-eeee-42ab-9f43-501ce4f752d7",
    "prId" : 2134,
    "comments" : [
      {
        "id" : "88da7d40-8565-4575-8b85-b6de00b2d7b3",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Here we produce values to be used later on similar to normal fields.\r\n\r\nFor example for template we get `early` already included in enclosing block from pattern match, but since derives is not in unapply, we need to add it manually.\r\n\r\n```scala\r\nval derives = tree.derives\r\n```",
        "createdAt" : "2020-10-09T12:39:20Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 127,
    "diffHunk" : "@@ -1,1 +103,107 @@    q\"\"\"\n      var same = true\n      ..$binaryCompatGetters\n      ..$transformedFields\n      ..${binaryCompatFields.map(transformField)}"
  },
  {
    "id" : "74fafa49-7411-455d-b8da-0e7956da518d",
    "prId" : 2134,
    "comments" : [
      {
        "id" : "d5df7b92-687d-4ea8-abb7-4d198e899b31",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "The same logic used for tranformedFields is used here for binary compat ones.\r\n```\r\nval derives1 = {...}\r\n```",
        "createdAt" : "2020-10-09T12:39:53Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 129,
    "diffHunk" : "@@ -1,1 +105,109 @@      ..$binaryCompatGetters\n      ..$transformedFields\n      ..${binaryCompatFields.map(transformField)}\n      if (same) tree\n      else {"
  },
  {
    "id" : "83ee859a-6e94-4fa7-a142-efe9cb5967fc",
    "prId" : 2134,
    "comments" : [
      {
        "id" : "b8795e4d-61b4-4019-b32a-4568a234a326",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "Additionally we need to set the fields afterwards. It will look something like:\r\n```scala\r\n if (same)\r\n    tree\r\n else\r\n    {\r\n      val newTree = _root_.scala.meta.Template(early1, inits1, self1, stats1);\r\n      newTree.setDerives(derives1);\r\n      newTree\r\n    }\r\n}\r\n```",
        "createdAt" : "2020-10-09T12:40:41Z",
        "updatedAt" : "2020-10-14T15:22:08Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b842ba226f297b475e55f55b68239e54aa345811",
    "line" : 134,
    "diffHunk" : "@@ -1,1 +109,113 @@      else {\n        val newTree = $constructor(..${transformedFields.map(_.name)})\n        ..$binaryCompatSetters\n        newTree\n      }"
  },
  {
    "id" : "3842e399-22cf-4bd3-940f-011552cdc543",
    "prId" : 1349,
    "comments" : [
      {
        "id" : "ccfd9f1e-b5d5-4292-8ea8-206170efba20",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "Wow, I can't believe it was this simple!\r\n\r\n",
        "createdAt" : "2018-02-19T17:36:47Z",
        "updatedAt" : "2018-02-19T18:04:16Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0d53589e87467cef6a3e03fcd0834a404afc404d",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +89,93 @@      ..$transformedFields\n      if (same) tree\n      else $constructor(..${transformedFields.map(_.name)}).withOrigin(tree.origin)\n    \"\"\"\n  }"
  }
]