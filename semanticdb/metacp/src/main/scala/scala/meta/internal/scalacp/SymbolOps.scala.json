[
  {
    "id" : "e5ee4a22-aad6-4250-99af-534391af35f9",
    "prId" : 1674,
    "comments" : [
      {
        "id" : "a42b90a5-c5d1-41d2-8f75-d67a9104a034",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "Nitpick, when pattern matching on a sealed trait I move guards into the body of the case instead\r\n```scala\r\n// before\r\ncase A if guard1 =>\r\ncase A if guard2 =>\r\ncase A => sys.error\r\n\r\n// after\r\ncase A =>\r\n  if (guard1) ..\r\n  else if (guard2) ..\r\n  else sys.error\r\n```\r\n\r\nI find it both easier to read and you retain exhaustivity checks.",
        "createdAt" : "2018-07-05T10:54:57Z",
        "updatedAt" : "2018-07-05T12:19:58Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "e3c012530b36d03419f3e882d24d6eeb3b34eb75",
    "line" : 77,
    "diffHunk" : "@@ -1,1 +98,102 @@            case PackageLookup => d.Package(name)\n            case JavaLookup => d.Type(name)\n            case ScalaLookup if sym.entry.entryType == 9 => d.Type(name)\n            case ScalaLookup if sym.entry.entryType == 10 => d.Term(name)\n            case ScalaLookup => sys.error(s\"unsupported symbol $sym\")"
  },
  {
    "id" : "595b68a3-fd8a-4d20-a2ee-46473a8bcc54",
    "prId" : 1580,
    "comments" : [
      {
        "id" : "f601f8b2-17fc-4151-9ed1-ff0188a5cf10",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "I'm a concerned about producing local symbols from metacp since those can get mixed with local symbols in a text document. For example, scalafix symtab is per-source which means after this PR, it's not clear how to implement `info(\"local1\")` since `local1` may come from a hardlinked symbol from a dependency or from a local variable in the current text document.\r\n\r\nI've wondered if we should adopt a similar scheme as JVM signatures where the first character indicates the type\r\n\r\n* prefix global symbols with `G`\r\n* prefix local symbols with `L`\r\n* prefix hardlink symbols with `H`\r\n\r\nHardlinked symbols could additionally be suffixed by the enclosing owner symbol so that \r\n\r\n```diff\r\n- this PR\r\n+ proposal\r\n\r\nadvanced.Structural#s2(). => method s2: AnyRef { val def x: Int }\r\n  AnyRef => scala.AnyRef#\r\n-  x => local1\r\n+  x => Hadvanced.Structural#s2().1\r\n  Int => scala.Int#\r\n```\r\n\r\nThis would mean hardlinked symbols could remain globally unique. ",
        "createdAt" : "2018-06-06T13:14:16Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "3395d2b9-1746-4dda-b2f8-58034a5b15cb",
        "parentId" : "f601f8b2-17fc-4151-9ed1-ff0188a5cf10",
        "author" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "https://github.com/scalameta/scalameta/issues/1592",
        "createdAt" : "2018-06-06T16:02:20Z",
        "updatedAt" : "2018-06-06T16:26:32Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3c581e165334c532a8783b351597731da4ed18e8",
    "line" : 234,
    "diffHunk" : "@@ -1,1 +232,236 @@\n  private var nextId = 0\n  private def freshSymbol(): String = {\n    val result = Symbols.Local(nextId)\n    nextId += 1"
  }
]