[
  {
    "id" : "42621864-02cf-4a70-bfeb-f84563b80302",
    "prId" : 736,
    "comments" : [
      {
        "id" : "133bd909-b667-4f64-8802-369150abe2b0",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "maybe `tasks` ? `original` doesn't tell me anything. If the intent is that it is something we expect to get after the `when/act` phase, then `expected` is - I think - well established name.",
        "createdAt" : "2019-05-29T14:56:40Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "f794bf7c-e6a9-4c46-b468-2ebb875f9161",
        "parentId" : "133bd909-b667-4f64-8802-369150abe2b0",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "`original` is used consistently in the metals test suites to represent the original input, for example\r\n```scala\r\ndef check(name: String, original: String, expected: String): Unit =\r\n  test(name) {\r\n    val obtained = someFunction(original)\r\n    assert(obtained == expected)\r\n  }\r\n```",
        "createdAt" : "2019-05-31T09:38:47Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 40,
    "diffHunk" : "@@ -1,1 +38,42 @@    val obtained = mutable.ListBuffer.empty[Int]\n    val size = 10\n    val original = 1.to(size).toList\n    val all = Future.traverse(original) { i =>\n      val promise = Promise[Unit]()"
  }
]