[
  {
    "id" : "cc739b69-ee98-48bc-b2df-9bb967aa923c",
    "prId" : 736,
    "comments" : [
      {
        "id" : "f01ca9e2-8400-4342-9271-f9e88e567205",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "Can we somehow limit the capacity? Unbounded queues in multi-threaded environment make me uneasy",
        "createdAt" : "2019-05-29T14:51:25Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "c92f408e-8c04-4706-9c5c-008e8926cc39",
        "parentId" : "f01ca9e2-8400-4342-9271-f9e88e567205",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We construct the queue in the same way as `Executors.newSingleThreadExecutor()`. All submitted jobs are automatically cancelled after a configurable timeout and cancelled runnables exit immediately (they don't even call the submitted function).",
        "createdAt" : "2019-05-31T09:20:12Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 79,
    "diffHunk" : "@@ -1,1 +77,81 @@\n  /** Priority queue that runs the most recently submitted task first. */\n  private class LastInFirstOutBlockingQueue\n      extends PriorityBlockingQueue[Runnable](10, new ju.Comparator[Runnable] {\n        def compare(o1: Runnable, o2: Runnable): Int = {"
  },
  {
    "id" : "4bf7d664-c95f-4245-b49f-55d227b7ad2d",
    "prId" : 736,
    "comments" : [
      {
        "id" : "3044b59a-b3df-4c64-b74b-ae31c88d5404",
        "parentId" : null,
        "author" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "body" : "Can we make it `PriorityBlockingQueue[Job]`?",
        "createdAt" : "2019-05-29T14:52:03Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "mzarnowski",
          "name" : "Marek Żarnowski",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/3709537?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "746be4ba-332a-42f7-a600-5c98db8c36b1",
        "parentId" : "3044b59a-b3df-4c64-b74b-ae31c88d5404",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "We can but then we would have to move the cast to `asInstanceOf[BlockingQueue[Runnable]]` in the `ThreadPoolExecutor`. I added a comment why these casts are safe.",
        "createdAt" : "2019-05-31T09:37:27Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 80,
    "diffHunk" : "@@ -1,1 +78,82 @@  /** Priority queue that runs the most recently submitted task first. */\n  private class LastInFirstOutBlockingQueue\n      extends PriorityBlockingQueue[Runnable](10, new ju.Comparator[Runnable] {\n        def compare(o1: Runnable, o2: Runnable): Int = {\n          // Downcast is safe because we only submit `Job` runnables into this"
  },
  {
    "id" : "8f9e9789-be08-4430-8756-78be484c13d0",
    "prId" : 736,
    "comments" : [
      {
        "id" : "ed122285-88db-410f-afa3-94eda44c7da6",
        "parentId" : null,
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "can it just be `=> Unit` ? Would avoid having to write additional () => when submitting any job.",
        "createdAt" : "2019-05-30T14:56:02Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ca6f27c2-8a67-43d4-9de0-f30b3e8932f3",
        "parentId" : "ed122285-88db-410f-afa3-94eda44c7da6",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "It can be but I don't think it would make the code more readable. As a general rule of thumb I avoid by-name parameters until it's become painful to write the leading `() =>`. In this case, we only call `submit` once.  ",
        "createdAt" : "2019-05-31T09:18:36Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0159172e-6917-4949-8796-52c840fbbdc8",
        "parentId" : "ed122285-88db-410f-afa3-94eda44c7da6",
        "author" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "body" : "It's also a couple times in tests, but it's ok with me.",
        "createdAt" : "2019-05-31T10:06:41Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "tgodzik",
          "name" : "Tomasz Godzik",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/3807253?u=094831e6a696f583ddfd86d3e5923fd8545c543a&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "054a255b-7b06-4619-bfb0-45a57d87c4e1",
        "parentId" : "ed122285-88db-410f-afa3-94eda44c7da6",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I personally think it's more readable with the leading `() =>` at call-sites. It's only for APIs that are used a lot like `Option[T].getOrElse(=>T)` where I think by-name is justified.",
        "createdAt" : "2019-05-31T10:09:29Z",
        "updatedAt" : "2019-06-01T12:08:36Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "3cd39a3dc1957ac5b5e4e60da9c3eae356702ace",
    "line" : 32,
    "diffHunk" : "@@ -1,1 +30,34 @@  override def toString(): String = s\"CompilerJobQueue($executor)\"\n  def shutdown(): Unit = executor.shutdown()\n  def submit(fn: () => Unit): Unit = {\n    submit(new CompletableFuture[Unit](), fn)\n  }"
  }
]