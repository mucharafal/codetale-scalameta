[
  {
    "id" : "70a31139-db4e-4e52-b76c-ed4b7875fe96",
    "prId" : 128,
    "comments" : [
      {
        "id" : "f7b84970-60ba-4917-876d-e481f1d686b6",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I'll report the comment as a review comment, so it's easier to see.\r\nUnder what circumstances is this a `StringCorrelationId`? Should we ignore it?",
        "createdAt" : "2017-12-15T14:46:56Z",
        "updatedAt" : "2017-12-15T21:25:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "ce9e3eb5-5dbf-4d79-8144-607bce202d93",
        "parentId" : "f7b84970-60ba-4917-876d-e481f1d686b6",
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "I've seen https://github.com/scalameta/language-server/pull/128#commitcomment-26300800, that makes sense.",
        "createdAt" : "2017-12-15T14:48:49Z",
        "updatedAt" : "2017-12-15T21:25:34Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "baa275778ef3f4f47fbd5cf8309f788fb8829473",
    "line" : 72,
    "diffHunk" : "@@ -1,1 +180,184 @@    }.runAsync\n    id match {\n      case NumericCorrelationId(value) =>\n        activeRequestsById.put(value.toIntExact, future)\n      case _ =>"
  },
  {
    "id" : "d1bef8cd-7583-49e3-bd92-fd40cc80c323",
    "prId" : 103,
    "comments" : [
      {
        "id" : "993a1162-878a-49f2-a4c3-35de136f258e",
        "parentId" : null,
        "author" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "body" : "How about making this a `trait`? TBH I never understood the `abstract class` vs `trait` thing in Scala, hence I always used traits.",
        "createdAt" : "2017-12-09T13:38:09Z",
        "updatedAt" : "2017-12-09T13:43:06Z",
        "lastEditedBy" : {
          "login" : "gabro",
          "name" : "Gabriele Petronella",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/691940?u=5aaf176f5da60764f857b8f8c6842217f737627f&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "1f89627b-6b25-41c3-8a1a-634028791ce7",
        "parentId" : "993a1162-878a-49f2-a4c3-35de136f258e",
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "body" : "I prefer abstract class unless I expect it to be mixed into another class. abstract classes can accept parameters (traits get that ability too in dotty) and they also make it easier to keep compatibility pre-2.12 (although that's irrelevant here). I think it's best to keep this as a class here, I can make it non-abstract by implementing commandHandler, but it doesn't really matter for us much here.",
        "createdAt" : "2017-12-09T13:47:51Z",
        "updatedAt" : "2017-12-09T13:47:51Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/1408093?v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "b806662917cd1a44afa64fabbb83717dd0bbefe5",
    "line" : 28,
    "diffHunk" : "@@ -1,1 +28,32 @@ *       and that can't subclass anything other than Any\n */\nabstract class Connection(inStream: InputStream, outStream: OutputStream)(implicit s: Scheduler)\n    extends LazyLogging with Notifications {\n  private val msgReader = new MessageReader(inStream)"
  }
]