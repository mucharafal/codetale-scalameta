[
  {
    "id" : "1fa77148-cc61-4003-93cf-f0fd0a23926e",
    "prId" : 1422,
    "comments" : [
      {
        "id" : "25954613-340a-4844-913c-9fadeb28b534",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "칍lafur P치ll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "What do you think about  parsing `_root_.a.` into the same structure as `a.`? It could be implemented as simply as `.stripPrefix(\"_root_\")`.\r\n\r\nThis would come at the price that to parse a top-level package named `_root_` you would need to write `_root_._root_.a`. However, any person who creates a top-level package named `_root_` is welcome to suffer the consequences. The backward compatibility with all previously hand-written symbols is worth it IMO",
        "createdAt" : "2018-03-10T12:20:55Z",
        "updatedAt" : "2018-03-10T16:00:18Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "칍lafur P치ll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "252e07cf-de4f-461c-a303-a207e13d796c",
        "parentId" : "25954613-340a-4844-913c-9fadeb28b534",
        "author" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Good idea. I'll update the spec and the implementation.",
        "createdAt" : "2018-03-10T15:48:33Z",
        "updatedAt" : "2018-03-10T16:00:18Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "e350b91a-672a-44ed-8e51-79fbbc46cbb4",
        "parentId" : "25954613-340a-4844-913c-9fadeb28b534",
        "author" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "https://github.com/scalameta/scalameta/issues/1424",
        "createdAt" : "2018-03-10T16:46:07Z",
        "updatedAt" : "2018-03-10T16:46:07Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "d2a4d472bf076e929228ea5770ca1e49a796cbf7",
    "line" : 34,
    "diffHunk" : "@@ -1,1 +88,92 @@      def parseSingle(owner: Symbol): Symbol = {\n        def global(signature: Signature): Symbol.Global = {\n          if (owner == Symbol.None && signature != Signature.Term(\"_root_\")) {\n            val root = Symbol.Global(Symbol.None, Signature.Term(\"_root_\"))\n            Symbol.Global(root, signature)"
  },
  {
    "id" : "4132e112-aa48-4dde-bde1-173b20ca7ca8",
    "prId" : 1238,
    "comments" : [
      {
        "id" : "5e3474b7-e589-4f5e-b418-533445b02415",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "칍lafur P치ll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "游녨 ",
        "createdAt" : "2018-02-01T11:48:34Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "칍lafur P치ll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0295ec5950b1f4dad650d2b602c7cbe9e15b136f",
    "line" : 26,
    "diffHunk" : "@@ -1,1 +124,128 @@      def parseLocal(): Symbol = {\n        val name = parseName()\n        if (name.startsWith(\"local\")) Symbol.Local(name)\n        else fail()\n      }"
  }
]