[
  {
    "id" : "7f299e49-0fec-4fee-a16a-9757373571cc",
    "prId" : 1416,
    "comments" : [
      {
        "id" : "c7e1e7d4-929f-4e08-9308-2ef6862debe6",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "👏 👏 ",
        "createdAt" : "2018-03-09T09:24:21Z",
        "updatedAt" : "2018-03-09T15:12:28Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "2ff10c15502b6b6400abe286a263819084a11d18",
    "line" : 13,
    "diffHunk" : "@@ -1,1 +112,116 @@              var dflags = 0L\n              def dflip(dbit: Long) = dflags ^= dbit\n              if (slanguage == l.JAVA) dflip(d.JAVADEFINED)\n              skind match {\n                case k.LOCAL => dflip(d.LOCAL)"
  },
  {
    "id" : "f0afa203-9ae4-46c7-b473-066ce4212eb7",
    "prId" : 1373,
    "comments" : [
      {
        "id" : "650d72e0-761b-4079-9d96-e6fba8752525",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "👍 ",
        "createdAt" : "2018-02-27T09:59:43Z",
        "updatedAt" : "2018-02-27T11:18:13Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "384068564d24a8d1d4b4b578ae673d40f3d2ab0d",
    "line" : 12,
    "diffHunk" : "@@ -1,1 +345,349 @@              val slocation = None\n              val ssignature = {\n                if (ddenot.signature.nonEmpty) {\n                  val stext = ddenot.signature\n                  val soccurrences = ddenot.names.map {"
  },
  {
    "id" : "26f3df8b-112a-4926-acab-bc32a0322000",
    "prId" : 1253,
    "comments" : [
      {
        "id" : "70376fcf-b76a-45b3-b0b0-039bc3de3851",
        "parentId" : null,
        "author" : {
          "login" : "MasseGuillaume",
          "name" : "Guillaume Massé",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/921490?u=1ea96b0787a224aed96b7091c354e76d0f55960c&v=4"
        },
        "body" : "suri is always a file?",
        "createdAt" : "2018-02-04T11:01:59Z",
        "updatedAt" : "2018-02-04T11:01:59Z",
        "lastEditedBy" : {
          "login" : "MasseGuillaume",
          "name" : "Guillaume Massé",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/921490?u=1ea96b0787a224aed96b7091c354e76d0f55960c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d538bb9c-084e-4c7b-8d5b-1650711cbb20",
        "parentId" : "70376fcf-b76a-45b3-b0b0-039bc3de3851",
        "author" : {
          "login" : "MasseGuillaume",
          "name" : "Guillaume Massé",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/921490?u=1ea96b0787a224aed96b7091c354e76d0f55960c&v=4"
        },
        "body" : "What if you have a cross-project?",
        "createdAt" : "2018-02-04T11:06:42Z",
        "updatedAt" : "2018-02-04T11:06:42Z",
        "lastEditedBy" : {
          "login" : "MasseGuillaume",
          "name" : "Guillaume Massé",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/921490?u=1ea96b0787a224aed96b7091c354e76d0f55960c&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "0fb14844-f16e-4f1f-92fe-000fdd9406b2",
        "parentId" : "70376fcf-b76a-45b3-b0b0-039bc3de3851",
        "author" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "`suri` is a relative path (original source's path minus the original sourceroot).\r\n\r\nIn case of multiple projects sharing the same files, you end up with SemanticDB payloads that have the same uris. This means that local symbols aren't guaranteed to be unique within universes that mix such projects.\r\n\r\nHowever, this problem was also present in SemanticDB v2. This pull requests doesn't aim to fix this problem though - just to achieve feature parity between v2 and v3.",
        "createdAt" : "2018-02-04T20:21:48Z",
        "updatedAt" : "2018-02-04T20:21:48Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "c787ab1acc1b048e2f532befcc18c966e6423558",
    "line" : 5,
    "diffHunk" : "@@ -1,1 +64,68 @@      assert(sschema == s.Schema.SEMANTICDB3, \"s.TextDocument.schema must be ${s.Schema.SEMANTICDB3}\")\n      def dsymbol(ssymbol: String) = {\n        def suffix = suri.replace(\"/\", \"_\").replace(\".\", \"_\")\n        if (ssymbol.startsWith(\"local\")) d.Symbol(ssymbol + \"_\" + suffix)\n        else d.Symbol(ssymbol)"
  },
  {
    "id" : "e0c56b3d-7237-4744-a7d0-bc1fb9a78bda",
    "prId" : 1238,
    "comments" : [
      {
        "id" : "ebe086a7-a863-42d7-86ed-834e1efe49e5",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "we should make lineToOffset non-package-private, both metals and metaconfig have custom files in org.langmeta package to access this method. Now that line/character are the default I think we should bake these into the public API.\r\n\r\nMaybe even add new Position.Range constructor: `Position.Range.fromLine(input, startLine, startColumn, endLine, endColumn)`",
        "createdAt" : "2018-02-01T12:26:05Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "fad68c77-e449-4370-9e19-12bef3974a79",
        "parentId" : "ebe086a7-a863-42d7-86ed-834e1efe49e5",
        "author" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2018-02-01T15:39:26Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0295ec5950b1f4dad650d2b602c7cbe9e15b136f",
    "line" : 104,
    "diffHunk" : "@@ -1,1 +80,84 @@      object sRange {\n        def unapply(srange: s.Range): Option[dPosition] = {\n          val dstartOffset = dinput.lineToOffset(srange.startLine) + srange.startCharacter\n          val dendOffset = dinput.lineToOffset(srange.endLine) + srange.endCharacter\n          Some(dPosition.Range(dinput, dstartOffset, dendOffset))"
  },
  {
    "id" : "34e1e917-433f-4d69-9a21-19c41ca7e771",
    "prId" : 1238,
    "comments" : [
      {
        "id" : "28155d52-57db-4810-a151-2902e11c2451",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "General note, I've found the error messages in these conversion to be cryptic. If for example `d.Symbol` fails then I want the error message from that apply instead of a generic \"bad protobuf\". Pattern matching is not helping us here IMO.",
        "createdAt" : "2018-02-01T12:30:04Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0295ec5950b1f4dad650d2b602c7cbe9e15b136f",
    "line" : 233,
    "diffHunk" : "@@ -1,1 +179,183 @@                    d.ResolvedName(dsyntheticpos, dsym, disDefinition)\n                  case other =>\n                    sys.error(s\"bad protobuf: unsupported occurrence $other\")\n                }.toList\n              }.getOrElse(Nil)"
  },
  {
    "id" : "4743d1f6-7181-48b0-a8e4-d6ea91d2ff9d",
    "prId" : 1238,
    "comments" : [
      {
        "id" : "4950846f-e023-4d15-8bee-d4290a276608",
        "parentId" : null,
        "author" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "body" : "While were refactoring this, can we please add more expect tests for modifiers? The current expect tests don't handle all available modifiers, writing a single file like\r\n```scala\r\npackage object App {\r\n  trait Trait\r\n  class Class\r\n  object Object\r\n  implicit def Implicit = 1\r\n  sealed trait Sealed\r\n  protected def Protected = 2\r\n  def TypeParameter[T] = 3\r\n  def Parameter(Param: Int) = 4\r\n  ...\r\n}\r\n```\r\n\r\nWe have hit on roundtrip bugs and those are usually not discovered until we pull in the latest release in scalafix.",
        "createdAt" : "2018-02-01T12:37:33Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : {
          "login" : "olafurpg",
          "name" : "Ólafur Páll Geirsson",
          "avatarUrl" : "https://avatars1.githubusercontent.com/u/1408093?u=dceadb57ba23a7bdcdd46a4f066a2d3c8d0cf717&v=4"
        },
        "tags" : [
        ]
      },
      {
        "id" : "d852e8bc-81bf-4d2b-a4b2-3c233fcbc792",
        "parentId" : "4950846f-e023-4d15-8bee-d4290a276608",
        "author" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "body" : "Done.",
        "createdAt" : "2018-02-01T15:38:43Z",
        "updatedAt" : "2018-02-01T16:00:22Z",
        "lastEditedBy" : {
          "login" : "xeno-by",
          "name" : "Eugene Burmako",
          "avatarUrl" : "https://avatars0.githubusercontent.com/u/609152?u=20bb3a58b554d0984a33eaa519c5cf3fd09e88fc&v=4"
        },
        "tags" : [
        ]
      }
    ],
    "commit" : "0295ec5950b1f4dad650d2b602c7cbe9e15b136f",
    "line" : 329,
    "diffHunk" : "@@ -1,1 +250,254 @@            }\n          }\n          object dResolvedSymbol {\n            def unapply(dresolvedSymbol: d.ResolvedSymbol): Option[s.SymbolInformation] = {\n              val d.ResolvedSymbol(dsymbol, ddenot) = dresolvedSymbol"
  }
]